name: CI

on: [push, pull_request]

jobs:
  build_test_build_release:
    strategy:
      fail-fast: false
      matrix:
        target: [windows-x86, windows-x64, ubuntu, macos]
        include:
          # We're using static linking on Windows for the tests
          # because it uses C++ API which is not properly supported yet
          - target: windows-x86
            vm: windows-latest
            triplet: x86-windows
            vcpkg_extras: "getopt-win32"
            cmake_platform_flag: "-A Win32"
            test_link_static: "true"
            test_build_type: Debug
            release_build_flag: "--config Release"
          - target: windows-x64
            vm: windows-latest
            triplet: x64-windows
            vcpkg_extras: "getopt-win32"
            cmake_platform_flag: "-A x64"
            test_link_static: "true"
            test_build_type: Debug
            release_build_flag: "--config Release"
          - target: ubuntu
            vm: ubuntu-18.04
            triplet: x64-linux-dynamic-release # freetype won't link bz2 correctly with vcpkg debug
            vcpkg_extras: ""
            cmake_platform_flag: ""
            test_link_static: "false"
            test_build_type: Release # can't use debug because vcpkg toolchain links debug libs
            release_build_flag: ""
          - target: macos
            vm: macos-latest
            triplet: x64-osx-dynamic
            vcpkg_extras: ""
            cmake_platform_flag: ""
            test_link_static: "false"
            test_build_type: Debug
            release_build_flag: ""
    runs-on: ${{ matrix.vm }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2.1.0
        with:
          submodules: true
      # Install our C/C++ library dependencies
      # and test support libraries:
      - uses: actions/cache@v1
        id: cache-vcpkg
        with:
          key: vcpkg-${{ matrix.target }}-v6
          path: vcpkg/
      - run: |
          mkdir -p ./vcpkg
          cp -a $VCPKG_INSTALLATION_ROOT/. ./vcpkg/
          cd vcpkg/ && git reset --hard && git pull && git checkout 89d112b839a61f81fb5f341c908d6412e3855228 && cd ../
          ./vcpkg/vcpkg install \
            --triplet ${{ matrix.triplet }} \
            --overlay-triplets=misc/vcpkg_custom_triplets \
            --overlay-ports=$GITHUB_WORKSPACE/misc/vcpkg_custom_ports \
            freetype[png] harfbuzz[ucdn] icu-cobbletext ms-gsl catch2 \
            boost-container-hash sdl2 stb ${{ matrix.vcpkg_extras }}
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      - uses: actions/cache@v1
        id: cache-uthash
        with:
          key: uthash-${{ matrix.target }}-v1
          path: lib/uthash/
      - run: |
          cd lib
          git clone https://github.com/troydhanson/uthash.git
          cd uthash
          git checkout 1124f0a70b0714886402c3c0df03d037e3c4d57a
        if: steps.cache-uthash.outputs.cache-hit != 'true'
      # Build in debug mode for testing:
      - run: |
          mkdir build
          cd build
          cmake .. -D CMAKE_BUILD_TYPE=${{ matrix.test_build_type }} ${{ matrix.cmake_platform_flag }} \
            -D CMAKE_VERBOSE_MAKEFILE=true \
            -D COBBLETEXT_CUSTOM_ICU=true \
            -D COBBLETEXT_BUILD_DOCS=false \
            -D COBBLETEXT_STATIC=${{ matrix.test_link_static }} \
            -D VCPKG_TARGET_TRIPLET=${{ matrix.triplet }} \
            -D CMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -D UTHASH_INCLUDE_PATH=$GITHUB_WORKSPACE/lib/uthash/src/
      - run: |
          cmake --build . --target test_main
          cmake --build . --target ppm_example
        working-directory: build/
      - run: cp -a vcpkg/installed/${{ matrix.triplet }}/lib/. build/bin/
        if: matrix.target == 'macos'
          # ctest copies automatically on Windows. On other OS, cmake sets
          # RPATH for debugging, but vcpkg builds are glitchy.
          # We could use DYLD_LIBRARY_PATH on macOS, but it's also glitchy.
      - run: ctest --verbose -C Debug
        working-directory: build/
        env:
          # On Ubuntu, copying the libraries won't work because it doesn't
          # search in the executable's directory, but LD_LIBRARY_PATH works
          LD_LIBRARY_PATH: "${{ github.workspace }}/vcpkg/installed/${{ matrix.triplet }}/lib/"
      # Now build dynamic library:
      - run: |
          mkdir build-release
          cd build-release
          cmake .. -D CMAKE_BUILD_TYPE=Release ${{ matrix.cmake_platform_flag }} \
            -D CMAKE_VERBOSE_MAKEFILE=true \
            -D COBBLETEXT_CUSTOM_ICU=true \
            -D COBBLETEXT_BUILD_DOCS=false \
            -D COBBLETEXT_BUILD_TESTS=false \
            -D COBBLETEXT_BUILD_EXAMPLES=false \
            -D VCPKG_TARGET_TRIPLET=${{ matrix.triplet }} \
            -D CMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake
      - run: |
          cmake --build . --target cobbletext ${{ matrix.release_build_flag }}
          cmake --install . --config Release --prefix ./install_dir/ --verbose
        working-directory: build-release/
      - uses: actions/upload-artifact@v1
        with:
          name: bin-${{ matrix.triplet }}
          path: build-release/install_dir/
      - run: |
          rm -f ./vcpkg/vcpkg-export*
          ./vcpkg/vcpkg export \
            --triplet ${{ matrix.triplet }} \
            --overlay-triplets=misc/vcpkg_custom_triplets \
            --7zip \
            freetype[png] harfbuzz[ucdn] icu-cobbletext
      - run: |
          mkdir -p build-release/bin-dependencies/
          mv ./vcpkg/vcpkg-export* build-release/bin-dependencies/
      - uses: actions/upload-artifact@v1
        with:
          name: bin-dependencies-${{ matrix.triplet }}
          path: build-release/bin-dependencies/
  build_emscripten:
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2.1.0
        with:
          submodules: true
      # System dependencies
      - run: |
          sudo apt install libfreetype6-dev libharfbuzz-dev libicu-dev \
            libboost-dev libmsgsl-dev
      - uses: actions/checkout@v2
        with:
          repository: nothings/stb
          path: stb
          ref: f54acd4e13430c5122cab4ca657705c84aa61b08
      # Emscripten
      - uses: actions/cache@v1
        id: emscripten-cache
        with:
          key: emscripten-cache-1.38.48-v1
          path: emsdk-cache
      - uses: mymindstorm/setup-emsdk@v4
        with:
          version: 1.38.48
          actions-cache-folder: 'emsdk-cache'
          no-cache: true
      # Emscripten ICU
      - uses: actions/cache@v1
        id: cache-emscripten-icu
        with:
          key: emscripten-icu-v1
          path: icu_emscripten_prefixed/
      - run: script/build_icu_emscripten_prefixed.sh
        if: steps.cache-emscripten-icu.outputs.cache-hit != 'true'
      # Build release
      - run: |
          mkdir build-release
          cd build-release
          emcmake cmake .. -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_VERBOSE_MAKEFILE=true \
            -D COBBLETEXT_CUSTOM_ICU=true \
            -D COBBLETEXT_BUILD_DOCS=false \
            -D COBBLETEXT_BUILD_TESTS=false \
            -D COBBLETEXT_BUILD_EXAMPLES=false \
            -D COBBLETEXT_EMSCRIPTEN=true \
            -D EMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=true \
            -D COBBLETEXT_STATIC=true \
            -D STB_INCLUDE_PATH=$GITHUB_WORKSPACE/stb \
            -D ICU_ROOT=$GITHUB_WORKSPACE/icu_emscripten_prefixed/icu_installed/
      - run: |
          emmake cmake --build . --target cobbletext
          emmake cmake --build . --target cobbletext_js
          emmake cmake --install . --prefix ./install_dir/ --verbose
        working-directory: build-release/
      - uses: actions/upload-artifact@v1
        with:
          name: bin-emscripten
          path: build-release/install_dir/
